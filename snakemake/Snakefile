from snakemake.remote.S3 import RemoteProvider as S3RemoteProvider
S3 = S3RemoteProvider()

configfile: "config.yaml"


rule all:
    input: "test_output.txt"

rule sample_info:
    input:
        "config.yaml"
    output:
        S3.remote("{bucket}/{batch}/sample_info.parquet".format(bucket=config["sample_info_bucket"], batch=config["JIRA"]))
    script:
        "sample_info.py"

rule batch_mafs:
    params:
        "s3://{bucket}/parquet/{batch}/"
    output:
        S3.remote("{bucket}/maf/{batch}.parquet")
    script:
        "batch_mafs.R"

batches = set(S3.glob_wildcards(config["gtc_bucket"] + "/parquet/{JIRA}/{part}.parquet")[0])
rule popmaf:
    params:
        expand("s3://{bucket}/maf/", bucket=config["gtc_bucket"])
    input:
        S3.remote(expand("{bucket}/maf/{batch}.parquet", bucket=config["gtc_bucket"], batch=batches)) #, stay_on_remote=True)
    output:
        "popmaf.txt"
    script:
        "popmaf.R"

rule bafRegress:
    params:
        expand("s3://{bucket}/parquet/{JIRA}/", bucket=config["gtc_bucket"], JIRA=config["JIRA"])
    input:
        "popmaf.txt"
    output:
        "bafRegress.txt"
    script:
        "bafRegress.R"

rule run_analysis:
    input:
        "bafRegress.txt"
    output:
        "test_output.txt"
    script:
        "cptac_analysis.R"